# -*- coding: utf-8 -*-
"""Funções.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MySq6a-smirXrI-PvSG-KIgifW5L-p54

**Funções**

Funções são blocos de código que executam funcionalidades específicas.

Normalmente são utilizados para evitar que determinada parte do seu código sejá escrito varias vezes.

Em Python sua sintaxe é definida usando **def** e atribuindo um nome a ela, veja um exemplo:
"""

#EXEMPLO
def cabeçalho():
  print('*************************************')

cabeçalho()

"""**Parâmetros**

Além de executar código, funções também podem receber e retornar dados.

Podemos enviar dados para uma função através de seus parâmetros.
"""

def imprime_nome(nome):
    print(f"Nome: {nome}")

imprime_nome("Erickson")
imprime_nome("Renan")
imprime_nome("Daniel")

"""**Valores Padrão (ou Valores Default)**

A utilização dos valores padrão serve para dar um valor quando quem chamou a função não passar nenhum valor para os parâmetros definidos.
"""

def flor(flor='Rosa', cor='Vermelha'):
    print(f"A cor da {flor} é {cor}")

flor()
flor("Orquídea", "Azul")

"""**Parâmetro *args**

Caso você queira desenvolver uma função que recebe um número variável de parâmetros, você pode utilizar o parâmetro *args!

Dessa forma, a função receberá os argumentos em forma de Tupla e você poderá processá-los com um loop for por exemplo!
"""

def maior_30(*args):
    print(args)
    print(type(args))

    for num in args:
        if num > 30:
            print(num)


maior_30(10, 20, 30, 40, 50, 60)

"""**Parâmetro **kwargs**

Agora, se quiser desenvolver uma função com número variado de parâmetros nomeados, utilize **kwargs.

Dessa forma, todos os dados passados à função serão guardados nessa variável **kwargs, em formato de um dicionário.

Oberve como podemos obter a chave a valor deles percorrendo os itens deste dicionário:
"""

def dados_pessoa(**kwargs):
    print(type(kwargs))

    for chave, valor in kwargs.items():
        print(f"{chave}: {valor}")

dados_pessoa(nome='João', idade=35, carreira='Desenvolvedor Fullstack')

"""**Funções com retorno de dados**

As funções também podem retornar valores através da palavra reservada return
"""

def soma_dois_numeros(valor1, valor2):
    soma = valor1 + valor2
    return soma


valor_soma = soma_dois_numeros(32, 15)
print(valor_soma)
print(soma_dois_numeros(50, 10))

"""Funções também podem retornar múltiplos dados. Veja o exemplo:


"""

def soma_dois_numeros_e_calcula_media(valor1, valor2):
    soma = valor1 + valor2
    media = (valor1 + valor2)/2

    return soma, media


valor_soma = soma_dois_numeros_e_calcula_media(32, 15)
print(valor_soma)
print(soma_dois_numeros_e_calcula_media(50, 10))

"""**Função de uma linha**

"""

# Definição das funções
def soma(valor1, valor2): return valor1 + valor2
def divisao(valor1, valor2): return valor1 / valor2
def multiplicacao(valor1, valor2): return valor1 * valor2

# Chamada das funções
print(soma(1, 5))
print(divisao(8, 2))
print(multiplicacao(8, 2))

"""**1 - Faça um programa para imprimir:**

1

2 2

3 3 3

.....

n n n n n n ... n
"""

def imprimir_padrao(n):
    for i in range(1, n + 1):
        print((str(i) + ' ') * i)

# Teste
n = int(input("Digite o valor de n: "))
imprimir_padrao(n)

def imprimir_padrao2(n):
    for i in range(1, n + 1):
        for j in range(i):
            print(i, end=" ")
        print()

# Teste
n = int(input("Digite o valor de n: "))
imprimir_padrao2(n)